/*
    Array of N subjects given, each index represent number of problems. 
    Each problem takes unit amount of time to solve 1 problem.
    You have K friends with whom you have to divide the problems.
    1 subject can't be shared. Means 1 subject has to be assigned to exactly one friend. (it's understood that 1 friend can handle more subjects)
    Also the assignments of subjects has to be contiguous (Means if want to assign more subjects to 1 friend, then has to be given next available subjects adjacent)
    Calculate maximum number of problems allocated to any of the friends can be minimized.

    Sample Input 1:>
    1
    3 1
    20 12 40
    Sample Output 1:>
    72
    Explanation for sample 1:>
    For the first test case, there is only 1 possible way to do the assignment, i.e. {20, 12, 40}. So, the minimum time required is 20 + 12 + 40 = 72.
    Sample Input 2:>
    2
    4 8
    30 50 40 100
    4 2
    12 20 50 60
    Sample Output 2:>
    100
    82
    Explanation for sample 2:>
    For the first test case, there are 8 friends, but only 4 subjects. So each subject is assigned to one friend and the maximum time taken is max(30, 50, 40, 100) = 100.
    
    For the second test case, the assignment of problems can be done in the following ways.
    {} and {12,20,50,60}. Time required = max(0, 12+20+50+60) = max(0, 142) = 142
    {12} and {20,50,60}. Time required = max(12, 20+50+60) = max(12, 130) = 130
    {12, 20} and {50,60}. Time required = max(12+20, 50+60) = max(32, 110) = 110
    {12,20,50} and {60}. Time required = max(12+20+50, 60) = max(82, 60) = 82
    {12,20,50, 60} and {}. Time required = max(12+20+50+60, 0) = max(142, 0) = 142
    So, out of all the above following ways, 82 is the lowest possible time. Hence, our answer is 82.

*/

Approach : brute force would be too difficult to implement and exponential time complexity would be bad. bcs it would be similar to combinatrics problem.

Approach : As pattern couldn't be found, so particular greedy can't be applied. DP seems inefficient.
           Best possible solution is Binary hunting for the required value. As assignation is contiguous.
           So low value can be taken as 0 (although correct will be max of the given array, but it wouldn't help much in time complexity.
           And high value can be taken as sum of the array (means all subjects all problems was given to one friend)
           mid = (low + high) >> 1 ,  this we have to check for validity, if valid which means : mid is the max of the problems given to any of the friend ( which is required to be minimized )
           then our next high would be = mid - 1 and so on , we would try to converge.
           invalidity check will be : let's say keeping mid as limit as the max number of problems assignations to a friend. if that crosses, we would start assigning to next friend.
           if K (number of friends) are consumed first before the subjects traversal , this means invalid, else valid.


#include <algorithm>
#include <climits>

int64_t isValid( vector<int> & subjects, int k, const int64_t & limit){
	int64_t curTimeCost = 0, maxCost = 0;
	int i = 0, n = subjects.size();
	while( i < n && k > 0 ) {
		curTimeCost = curTimeCost + subjects[i];
		if(curTimeCost > limit) {
			if( --k == 0 ) break;
			curTimeCost = subjects[i];
		}
		maxCost = max(maxCost, curTimeCost);
		++i;
	}
	if( i >= n ) return maxCost;
	return -1;
}

long long int minimumRequiredTime(vector<int> &subjects, int k)
{
	int64_t low = 0, high = accumulate( subjects.begin(), subjects.end(), (int64_t)0 );
	int64_t ans = LLONG_MAX;
	while(low <= high){
		int64_t mid = (low + high) >> 1;
		int64_t validStatus = isValid(subjects, k, mid);
		if(validStatus != -1){
			high = mid - 1;
			ans = min( ans, validStatus );
		}
		else low = mid + 1;
	}
	return ans == LLONG_MAX ? -1 : ans;
}


T.C. : O(N * LogN)
S.C. : O( 1 )

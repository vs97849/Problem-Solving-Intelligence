/*
127. Word Ladder
Solved
Hard
Topics
Companies
A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.

 

Example 1:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.
Example 2:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
Output: 0
Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.
 

Constraints:

1 <= beginWord.length <= 10
endWord.length == beginWord.length
1 <= wordList.length <= 5000
wordList[i].length == beginWord.length
beginWord, endWord, and wordList[i] consist of lowercase English letters.
beginWord != endWord
All the words in wordList are unique.
*/

Approach:
      Let's first think for any path (not caring min length path). We want every arrangement for the dictionary vector, as during straight traversal, any valid string path can be found in any order.
      But that doesn't look optimized.
      Better, look possibility of every character (26 : a->z) at each index of current word you are at. Because exactly one character has to differ, so as soon as you reach the endWord, bingo. you got 
      the distance travelled.
      Looks like doing BFS when neighbor nodes are words formed by having character at kth pos (curWord, curWord[k] = {a->z}), iff that exists in dictionary given.
      So, this way min distance would be the level of the BFS from the start/begin word.
      Here, vis container would be needed as high 100% possibility of moving back to the word, it came from, hence inifinite back n forth navigation possible.


    int ladderLength(string &beginWord, string &endWord, const vector<string>& wordList) {
        unordered_set<string>wordHash(wordList.begin(), wordList.end());
        queue< pair<string, int> >qu;
        qu.push({beginWord, 1});
        unordered_set<string>vis;
        while(!qu.empty()){
            string curStr = qu.front().first;
            int dis = qu.front().second;
            qu.pop();
            if(vis.find(curStr) != vis.end()) continue;
            vis.insert(curStr);
            if(curStr == endWord) return dis;
            for(int k=0; k < curStr.length(); ++k){
                string tempStr = curStr;
                for(char c = 'a'; c <= 'z' ; ++c){
                    tempStr[k] = c;
                    if(wordHash.find(tempStr) != wordHash.end()){
                        qu.push({tempStr, dis + 1});
                    }
                }
            }
        }
        return 0;
    }

// T.C. : BFS so O(E + v) , O(maxWordLength * N (dictionary length )
// S.C. : O(N)

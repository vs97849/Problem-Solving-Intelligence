/* 
2101. Detonate the Maximum Bombs
Solved
Medium
Topics
premium lock icon
Companies
Hint
You are given a list of bombs. The range of a bomb is defined as the area where its effect can be felt. This area is in the shape of a circle with the center as the location of the bomb.

The bombs are represented by a 0-indexed 2D integer array bombs where bombs[i] = [xi, yi, ri]. xi and yi denote the X-coordinate and Y-coordinate of the location of the ith bomb, whereas ri denotes the radius of its range.

You may choose to detonate a single bomb. When a bomb is detonated, it will detonate all bombs that lie in its range. These bombs will further detonate the bombs that lie in their ranges.

Given the list of bombs, return the maximum number of bombs that can be detonated if you are allowed to detonate only one bomb.

 

Example 1:


Input: bombs = [[2,1,3],[6,1,4]]
Output: 2
Explanation:
The above figure shows the positions and ranges of the 2 bombs.
If we detonate the left bomb, the right bomb will not be affected.
But if we detonate the right bomb, both bombs will be detonated.
So the maximum bombs that can be detonated is max(1, 2) = 2.
Example 2:


Input: bombs = [[1,1,5],[10,10,5]]
Output: 1
Explanation:
Detonating either bomb will not detonate the other bomb, so the maximum number of bombs that can be detonated is 1.
Example 3:


Input: bombs = [[1,2,3],[2,3,1],[3,4,2],[4,5,3],[5,6,4]]
Output: 5
Explanation:
The best bomb to detonate is bomb 0 because:
- Bomb 0 detonates bombs 1 and 2. The red circle denotes the range of bomb 0.
- Bomb 2 detonates bomb 3. The blue circle denotes the range of bomb 2.
- Bomb 3 detonates bomb 4. The green circle denotes the range of bomb 3.
Thus all 5 bombs are detonated.
 

Constraints:

1 <= bombs.length <= 100
bombs[i].length == 3
1 <= xi, yi, ri <= 105

*/

Approach / Intuition :
    Key idea is: No pattern or No greed/directional approach seems to solve it, as you can't judge what's better by seeing the coordinates and the radius.
    So seems like every nodes bombs to be triggered and checked.
    Checking means here, what other bombs are reachable and further others from them and so on..
    So it's just visiting neighbors, hence clearly BFS or DFS based problem.
    And then whoever have more connected neighbors in terms of range, will be the answer.
    Key thing would be to calculate the adjacency list for forming the connectivity.


Code:
  // using distance formula between bomb1 -> bomb2 and comparing with radius/range of bomb1. if it's in range, that means is a neighbor or connected.
class Solution {
public:
    bool isInRange( int x1, int y1, int r, int x2, int y2 ) {
        return pow( x2-x1, 2 ) + pow( y2-y1, 2 ) <= pow( r, 2 );
    }

    int dfs( int bomb, vector<vector<int>> & adj, vector<bool> & vis ) {
        if(vis[bomb]) return 0;
        vis[bomb] = true;
        int count = 1;
        for(int inRangeBomb : adj[bomb]) {
            count += dfs(inRangeBomb, adj, vis);
        }
        return count;
    }
    int maximumDetonation(vector<vector<int>>& bombs) {
        int n = bombs.size();
        vector<vector<int>> adj(n);
        for(int i=0;i<n-1;++i) {
            int x1 = bombs[i][0], y1 = bombs[i][1], r1 = bombs[i][2];
            for(int j=i+1;j<n;++j) {
                int x2 = bombs[j][0], y2 = bombs[j][1], r2 = bombs[j][2];
                 if( isInRange(x1, y1, r1, x2, y2) ) {
                    adj[i].push_back(j);
                 }
                 if( isInRange(x2, y2, r2, x1, y1) ) {
                    adj[j].push_back(i);
                 }
            }
        }

        int ans = 0;
        for(int i=0;i<n;++i) {
            vector<bool>vis(n, 0);
            int ct = dfs(i, adj, vis);
            ans = max(ans, ct);
        }
        return ans;
    }
};

// T.C. : n * DFS : n * (n^2) : O( N^3 ) (as DFS = O(V+E) and in fully connected graph, E = N^2 )
// S.C. : O( N^2 )

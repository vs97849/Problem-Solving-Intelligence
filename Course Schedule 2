/*
There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites 
where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. 
If it is impossible to finish all courses, return an empty array.

 
Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].
Example 2:

Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
Output: [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. 
Both courses 1 and 2 should be taken after you finished course 0.
So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].
Example 3:

Input: numCourses = 1, prerequisites = []
Output: [0]
 

Constraints:

1 <= numCourses <= 2000
0 <= prerequisites.length <= numCourses * (numCourses - 1)
prerequisites[i].length == 2
0 <= ai, bi < numCourses
ai != bi
All the pairs [ai, bi] are distinct.

*/


Approach :
      problem states about dependency of one item over other item to start. And they need an order as an answer.
      So, at start only those courses could be started with which has no dependency.
      It straightforward a DAG ( directed acyclic graph ) problem. where course represents a node.
      Hence generate a graph. Where dependent will be on the indgeree ( or dest ) and predictor will be on the outdegree of an edge.
      construct indegree and do the bfs. And collect nodes as soon as their indegree becomes 0 ( zero ) .

class Solution {
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        vector< int > adj [ numCourses ] ;
        for( const vector< int > & edge : prerequisites ) {
            adj[ edge[1] ].push_back( edge[0] ) ;
        }
        vector< int > indegrees( numCourses, 0 ) ;
        for( int i = 0; i < numCourses; ++i ) {
            for( const int & dest : adj[ i ] ) {
                ++ indegrees[ dest ] ;
            }
        }

        queue< int > qu ;
        for( int i = 0; i < numCourses; ++i ) {
            if( indegrees[ i ] == 0 ) {
                qu.push( i ) ;
            }
        }

        vector< int > ans ;
        while( ! qu.empty() ) {
            const int src = qu.front() ;
            ans.push_back( src ) ;
            qu.pop() ;
            for( const int & dst : adj[ src ] ) {
                if( -- indegrees[ dst ] == 0 ) {
                    qu.push( dst ) ;
                }
                indegrees[ dst ] = indegrees[ dst ] < 0 ? 0 : indegrees[ dst ] ;
            }
        }
        return ans.size() == numCourses ? ans : vector<int>() ;
    }
};


// T.C.  :  O ( N + E )  : number of subjects + edges
// S.C.  :  O ( N + E ) :  number of prerequisites or edges

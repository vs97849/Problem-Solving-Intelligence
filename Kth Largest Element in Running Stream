/* Kth largest elements in running stream. 
Problem statement
You will be given a stream of numbers, and you need to find the 'kth' largest number in the stream at any given time.
As the stream of numbers can not be given during compile time, so you need to design a data structure which can accept infinite numbers and can return the 'kth' largest number at any given time.
The stream of numbers is nothing but a large collection of numbers from which integers are read at runtime, such as the user will never know the upper limit on the number of integers that will be read.

The implemented data structure must support the following operations:

1. add(DATA) :
   This function should take one argument of type and store it in its pool and returns the 'kth' largest number from the current pool of integers.
You will be given 'q' queries:

val - For this query, insert the integer into your current pool of integers and return the 'kth' largest integer from the existing pool of integers.
Note
 1. The maximum number of integers that will be given will always be under memory limits.

 2. You will also be given an initial pool of integers whose size equals k.

 3. The maximum number of queries will be less than 10^5.

 4. The 'kth' largest element is not the 'kth' distinct element but the 'kth' largest element in the sorted order.

 5. There will be at least one query of type 2.


Sample Input 1:
2 3
2 1 3
3 
5 
Sample Output 1:
2
3
*/

Approach 1 :
      using priority queue : as the problem itself is an example of top k priority elements. We need to return Kth largest or minimum element in top k priority element list.
      So , implementing min heap, will be fit for the reqiurement. as top element will be minimum and if we maintain min-heap of size k then top element of min-heap will be kth largest.
      so on running stream, add coming element to the min-heap, and pop element till size reduced to K.

#include <algorithm>
#include <queue>
class Kthlargest {
    int kth;
    priority_queue<int, vector<int>, greater<int> > pq;
public:

    Kthlargest(int k, vector<int> &arr) {
        kth = k;
        for(int & x : arr) pq.push(x);
    }

    int add(int num) {
        pq.push(num);
        while(pq.size() > kth) pq.pop();
        return pq.top();
    }

};

// T. C. : O(logN) for single element insertion.
// S.C. : O(k)

Approach 2 : 
     maintaining a set container of size k, could help. if we maintain a descending order multiset, then last element of size-k set would be the ans.
     So , first add new element to multiset, and erase till size becomes k. then remove last element.

#include <algorithm>
#include <set>
class Kthlargest {
    vector<int> arr;
    multiset<int,greater<int>>st;
public:
    Kthlargest(int k, vector<int> &arr) {
        for(int & x: arr) st.insert(x);
    }

    int add(int num) {
        st.insert(num);
        auto dItr = st.end();
        --dItr;
        st.erase( dItr );
        auto itr = st.rbegin();
        return *itr;
    }
};

// T.C. : O(LogN) : as adding new element could require that much
// S.C. : O(K) : container have to keep will be of size k
